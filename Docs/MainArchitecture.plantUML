@startuml

interface IWorld
{
  Coroutine StartCoroutine(IEnumerator coroutine);
  void StopCoroutine(Coroutine coroutine);
}

class GameWorld <<MonoBehaviour>>
{
  +BoardSystem.MoveState LastMoveState { get; }
  +BoardSystem BoardSystem { get; set; }
  +TurnSystem TurnSystem { get; set; }
  +UISystem UISystem { get; set; }
  __
  -void Awake();
  -void Start();
  -void OnDestroy();
}

interface IBoardSystem
{
  ColumnEventHandler OnColumnClicked;
  ColumnEventHandler OnColumnPointerEnter;
  ColumnEventHandler OnColumnPointerExit;
  __
  int ColumnCapacity { get; }
  IReadOnlyList<IColumn> Columns { get; }
  __
  bool IsWinMove(int controllerIndex, int columnIndex, out MoveDetails moveDetails);
  void AddPreview(int controllerIndex, int columnIndex);
  void RemovePreview(int columnIndex);
}

class BoardSystem <<Serializable>>
{
  +int ColumnCapacity { set; }
  +int ColumnCount { set; set; }
  +int WinSequenceSize { set; set; }
  +ColumnObject ColumnTemplate { get; set; }
  +Color[] DiscColors { get; set; }
  __
  +void Initialize();
  +void Dispose();
  +MoveState TryMove(int controllerIndex, int columnIndex);
}

interface IColumn
{
  int DiscCount { get; }
  Transform Parent { get; }
  __
  int? GetControllerIndex(int discIndex);
}

class ColumnObject <<MonoBehaviour>>
{
  +EventHandler OnClicked;
  +EventHandler OnPointerEnter;
  +EventHandler OnPointerExit;
  __
  +DiscObject DiscTemplate { get; set; }
  __
  +void Initialize(int capacity);
  +int? AddControllerIndex(int controllerIndex, Color? color);
  +void AddPreview(Color color);
  +void RemovePreview();
}

class DiscObject <<MonoBehaviour>>
{
  +int? ControllerIndex { get; set; }
  +Color? Color { get; set; }
  +Transform Parent { get; }
  __
  +void Initialize();
}

interface ITurnSystem
{
  IReadOnlyList<IController> Controllers { get; }
}

class TurnSystem <<Serializable>>
{
  +BeginTurnEventHandler OnTurnBegan;
  +EndTurnEventHandler OnTurnEnded;
  __
  +Controller[] ControllersAssets { get; set; }
  __
  +void Initialize(IWorld world, IBoardSystem boardSystem, ITurnSystem turnSystem);
  +void Dispose();
  +void BeginTurn(int turnId);
}

interface IController
{
  string DisplayName { get; }
}

abstract class Controller <<ScriptableObject>>
{
  +EndTurnEventHandler OnTurnEnded
  __
  #IBoardSystem BoardSystem { get; }
  #ITurnSystem TurnSystem { get; }
  #IWorld World { get; }
  __
  +abstract void BeginTurn();
  +void Initialize(IWorld world, IBoardSystem boardSystem, ITurnSystem turnSystem);
  #void EndTurn(int columnIndex);
}

class PlayerController <<ScriptableObject>>
{
  +override void BeginTurn();
}

class AIController <<ScriptableObject>>
{
  +override void BeginTurn();
}

class UISystem <<Serializable>>
{
  +UnityAction OnRestartButtonClick { add; remove; }
  __
  +void Initialize(IWorld world);
  +void Dispose();
  +void SetController(int controllerNumber, string controllerName, Color discColor);
  +void SetDrawMoveFeedbackActive();
  +void SetInvalidMOveFeedbackActive();
  +void SetWinMoveFeedbackActive();
}

IWorld <|.right. GameWorld
GameWorld *-right- BoardSystem
GameWorld *-down- TurnSystem
GameWorld *-up- UISystem

IBoardSystem <|.down. BoardSystem
IBoardSystem *-right- IColumn
BoardSystem *-right- ColumnObject

IColumn <|.down. ColumnObject
ColumnObject *-right- DiscObject

ITurnSystem <|.up. TurnSystem
ITurnSystem *-right- IController
TurnSystem *-right- Controller

IController <|.up. Controller
Controller <|-down- PlayerController
Controller <|-right- AIController

@enduml
